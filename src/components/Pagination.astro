---
// Pagination.astro
const { totalPages, currentPage } = Astro.props;

// 현재 페이지 주변의 페이지 번호를 계산하는 함수
const getPaginationRange = (
  current: number,
  total: number
): (number | string)[] => {
  const delta = 3;
  const range: (number | string)[] = [];
  for (
    let i = Math.max(2, current - delta);
    i <= Math.min(total - 1, current + delta);
    i++
  ) {
    range.push(i);
  }
  if (current - delta > 2) {
    range.unshift("...");
  }
  if (current + delta < total - 1) {
    range.push("...");
  }
  return range;
};

const paginationRange = getPaginationRange(currentPage, totalPages);
---

<ul class="flex align-middle items-center w-full justify-center text-[16px]">
  {
    currentPage > 1 && (
      <li>
        <a href={`/blog/${currentPage - 1}`}>이전</a>
      </li>
    )
  }
  {
    currentPage > 1 && (
      <li>
        <a href={`/blog/1`}>1</a>
      </li>
    )
  }
  {
    paginationRange.map((page) => {
      if (page === "...") {
        return <li>...</li>;
      }
      return (
        <li>
          <a href={`/blog/${page}`} class={currentPage === page ? "" : ""}>
            {page}
          </a>
        </li>
      );
    })
  }
  {
    currentPage < totalPages && (
      <li>
        <a href={`/blog/${totalPages}`}>{totalPages}</a>
      </li>
    )
  }
  {
    currentPage < totalPages && (
      <li>
        <a href={`/blog/${currentPage + 1}`}>다음</a>
      </li>
    )
  }
</ul>
